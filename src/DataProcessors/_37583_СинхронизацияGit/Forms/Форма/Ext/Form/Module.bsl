
#Область Служебный_Получение_Данных_GitHub

&НаКлиенте
Функция НовоеHTTPСоединение()
	АдресGitHubApi = "api.github.com";
	Порт = 443;
	HTTPСоединение = Новый HTTPСоединение(АдресGitHubApi,Порт,,,,,Новый ЗащищенноеСоединениеOpenSSL(), Ложь); 
	Возврат HTTPСоединение; 
КонецФункции

&НаКлиенте
Функция ПолучитьАдресРесурса(_Адрес,_Каталог)
	Возврат _Адрес +  ?(ПустаяСтрока(_Каталог),"","/"+_Каталог);
КонецФункции

// <ДанныеЗапросаGit>
//
// Параметры:   <HTTPСоединение> ,  <HTTPЗапрос>  -
// Возвращаемое значение:
//   <Данные>   -  Структура, Неопределено 
//
&НаКлиенте
Функция ДанныеЗапросаGitHub(HTTPСоединение,HTTPЗапрос)
	Ответ = HTTPСоединение.Получить(HTTPЗапрос) ;
	Данные = Неопределено;
	Если Ответ.КодСостояния = 200 Тогда 
		Результат = Ответ.ПолучитьТелоКакСтроку() ; 
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Результат);
		Данные = ПрочитатьJSON(ЧтениеJSON, Ложь);
		ЧтениеJSON.Закрыть();
	КонецЕсли;
	Возврат Данные;
КонецФункции 

///// --- Чтение каталога

&НаКлиенте
Процедура ПолучитьДанныеGitHub(HTTPСоединение,АдресРесурса,ЭлементДерева)
	// """ запрос содержимого каталога """ 
	HTTPЗапрос = Новый HTTPЗапрос ; 
	HTTPЗапрос.АдресРесурса = АдресРесурса; 
	ДанныеЗапроса = ДанныеЗапросаGitHub(HTTPСоединение,HTTPЗапрос);
	ОбработатьДанныеЗапросаGitHub(ДанныеЗапроса,HTTPСоединение,ЭлементДерева);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеЗапросаGitHub(ДанныеЗапроса,HTTPСоединение,ЭлементРодитель)
	// """ рекурсивное чтение  каталога""" 
	Если ДанныеЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(ДанныеЗапроса) = Тип("Массив") Тогда
		Для Каждого ЭлементМассива Из ДанныеЗапроса Цикл
			ЭлементДерева = ЭлементРодитель.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(ЭлементДерева,ЭлементМассива);
			ЭлементДерева.РесурсGitHub = ЭлементРодитель.РесурсGitHub;
			ЭлементДерева.Репозиторий = ЭлементРодитель.Репозиторий;
			Если СтрНайти("dirtree",ЭлементМассива.type) > 0 Тогда 
				ЭлементДерева.ДанныеКартинкиСтрок = 1;
				Если ЭлементРодитель.Рекурсия Тогда
					ЭлементДерева.Рекурсия  = Истина;
					АдресРесурса = ПолучитьАдресРесурса(ЭлементДерева.РесурсGitHub,ЭлементДерева.Path);
					ПолучитьДанныеGitHub(HTTPСоединение,АдресРесурса,ЭлементДерева);
				КонецЕсли;
			ИначеЕсли СтрНайти("file",ЭлементМассива.type) > 0 Тогда 
				ЭлементДерева.ДанныеКартинкиСтрок = 2;
			Иначе 
				ЭлементДерева.ДанныеКартинкиСтрок = 3; // такого не должно быть
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

///// --- Извлечение ресурсов

&НаКлиенте
Процедура ПолучитьДанныеРесурсаGitHub(HTTPСоединение,АдресРесурса,ЭлементДерева)
	// """ запрос отмеченных ресурсов GitHub  """ 
	HTTPЗапрос = Новый HTTPЗапрос ; 
	HTTPЗапрос.АдресРесурса = АдресРесурса; 
	ДанныеЗапроса = ДанныеЗапросаGitHub(HTTPСоединение,HTTPЗапрос);
	ОбработатьДанныеЗапросаРесурса(ДанныеЗапроса,HTTPСоединение,ЭлементДерева);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеЗапросаРесурсовGitHub(HTTPСоединение,ЭлементДерева)
	// """ рекурсивное чтение  каталога  """ 
	ЭлементыПотомки = ЭлементДерева.ПолучитьЭлементы();
	Если  ЭлементыПотомки.Количество() > 0 Тогда
		Для Каждого СтрокаДерева  Из  ЭлементыПотомки Цикл
				ОбработатьДанныеЗапросаРесурсовGitHub(HTTPСоединение,СтрокаДерева);
		КонецЦикла;
	Иначе
		Если ЭлементДерева.Пометка 
			И СтрНайти("file",ЭлементДерева.type) > 0 
			И СтрНайти(ЭлементДерева.Path,".xml")> 0  Тогда
			// для синхронизации подходят только файлы с расширением .xml
			GitHubApi = "https://api.github.com";
			АдресРесурса = СтрЗаменить(ЭлементДерева.url,GitHubApi,"");
			ПолучитьДанныеРесурсаGitHub(HTTPСоединение,АдресРесурса,ЭлементДерева);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеЗапросаРесурса(ДанныеЗапроса,HTTPСоединение,СтрокаДерева)
	// """  извлечение данных ресурса GitHub  """ 
	Если ДанныеЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(ДанныеЗапроса) = Тип("Структура") Тогда
		ОграничениеРазмера = 5242880;
		Если ДанныеЗапроса.size  > ОграничениеРазмера Тогда
			Возврат;
		КонецЕсли;
		СтрокаДерева.content = ДанныеЗапроса.content;
		//   	ДанныеЗапроса.encoding
		//   	ДанныеЗапроса.path   
		//   	ДанныеЗапроса.size
		//   	ДанныеЗапроса.sha
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПрочитатьСодержимоеРепозиторияGit(Команда)
	ДеревоПакетов.ПолучитьЭлементы().Очистить();
	HTTPСоединение = НовоеHTTPСоединение();
	Для Каждого СтрокаРеп Из Объект.Репозитории Цикл
		Если СтрокаРеп.Использование Тогда
			ЭлементРеп = ДеревоПакетов.ПолучитьЭлементы().Добавить();
			ЭлементРеп.Репозиторий = СтрокаРеп.Репозиторий; 
			ЭлементРеп.РесурсGitHub = СтрокаРеп.АдресРесурса; 
			АдресРесурса = ПолучитьАдресРесурса(ЭлементРеп.РесурсGitHub,СтрокаРеп.Каталог);
			url = АдресРесурса + "?ref=" + ?(ПустаяСтрока(СтрокаРеп.Ветка),"master",СокрЛП(СтрокаРеп.Ветка));
			ЭлементРеп.name = url;
			ЭлементРеп.url = url;
			ЭлементРеп.Path = СтрокаРеп.Каталог;
			ЭлементРеп.type = "repo";
			ПолучитьДанныеGitHub(HTTPСоединение,АдресРесурса,ЭлементРеп);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура ПрочитатьСодержимоеПапки(Команда)
	ДанныеСтроки = Элементы.ДеревоПакетов.ТекущиеДанные;
	Если ДанныеСтроки.ПолучитьЭлементы().Количество() > 0 Тогда
		ДанныеСтроки.ПолучитьЭлементы().Очистить();
	КонецЕсли;
	HTTPСоединение = НовоеHTTPСоединение();
	Если СтрНайти("dirtreerepo",ДанныеСтроки.type) > 0 Тогда
		АдресРесурса = ПолучитьАдресРесурса(ДанныеСтроки.РесурсGitHub,ДанныеСтроки.Path);
		ПолучитьДанныеGitHub(HTTPСоединение,АдресРесурса,ДанныеСтроки);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПрочитатьСодержимоеПапки_old(Команда)
	ДанныеСтроки = Элементы.ДеревоПакетов.ТекущиеДанные;
	Если ДанныеСтроки.ПолучитьЭлементы().Количество() > 0 Тогда
		ДанныеСтроки.ПолучитьЭлементы().Очистить();
	КонецЕсли;
	HTTPСоединение = НовоеHTTPСоединение();
	Если СтрНайти("dirtree",ДанныеСтроки.type) > 0 Тогда
		АдресРесурса = ПолучитьАдресРесурса(ДанныеСтроки.РесурсGitHub,ДанныеСтроки.Path);
		ПолучитьДанныеGitHub(HTTPСоединение,АдресРесурса,ДанныеСтроки);
	ИначеЕсли СтрНайти("repo",ДанныеСтроки.type) > 0 Тогда
		ПодчиненныеСтроки= ДанныеСтроки.ПолучитьЭлементы(); 	
		Для Каждого Элемент Из ПодчиненныеСтроки Цикл
			Элемент.Рекурсия = ДанныеСтроки.Рекурсия И  СтрНайти("dirtree",Элемент.type) > 0;
			АдресРесурса = ПолучитьАдресРесурса(Элемент.РесурсGitHub,Элемент.Path);
			ПолучитьДанныеGitHub(HTTPСоединение,АдресРесурса,Элемент);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СинхронизацияКаталгога(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ИзвлечьОтмеченныеРесурсы(Команда)
	HTTPСоединение = НовоеHTTPСоединение();
	ОбработатьДанныеЗапросаРесурсовGitHub(HTTPСоединение,ДеревоПакетов);
КонецПроцедуры

&НаКлиенте
Процедура Импорт(Команда)
	ДанныеИмпорт =  Элементы.ДеревоПакетов.ТекущиеДанные;
	ДвоичныеДанные = Base64Значение(ДанныеИмпорт.content);
	СтрокаXML_RAW = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанные,КодировкаТекста.UTF8);
	СтрокаXML = УдалитьНедопустимыеСимволыXML(СтрокаXML_Raw);
	ЧтениеXML = Новый ЧтениеXML; 
	ЧтениеXML.УстановитьСтроку(СтрокаXML); 
	Попытка
		ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		АлгоритмGIT = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTO)
		//Показатьxml(АлгоритмGit);
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Ошибка преобразования : "+ДанныеИмпорт.path;
		Сообщение.Сообщить();
	КонецПопытки;
КонецПроцедуры // Импорт()

#КонецОбласти



#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Репозитории.АдресРесурса КАК АдресРесурса,
	|	Репозитории.Каталог КАК Каталог,
	|	Репозитории.Ветка КАК Ветка,
	|	Репозитории.Ссылка КАК Репозиторий
	|ИЗ
	|	Справочник._37583_Репозитории_GitHub КАК Репозитории
	|Где Репозитории.Использование = Истина";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтрТаб = Объект.Репозитории.Добавить();
		ЗаполнитьЗначенияСвойств(СтрТаб, ВыборкаДетальныеЗаписи);
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементов

&НаКлиенте
Процедура ДеревоПакетовПометкаПриИзменении(Элемент)
	ДанныеСтроки = Элементы.ДеревоПакетов.ТекущиеДанные;
	ЗаполнитьПометкиПотомковРекурсивно(ДанныеСтроки,ДанныеСтроки.Пометка);
	УстановитьПометкиРодителейРекурсивно(ДанныеСтроки,ДанныеСтроки.Пометка);
КонецПроцедуры

#КонецОбласти



#Область Служебный_РаботаСЭлементамиФормы

&НаКлиенте
Процедура ЗаполнитьПометкиПотомковРекурсивно(ДанныеСтроки,Пометка)
	ПодчиненныеСтроки= ДанныеСтроки.ПолучитьЭлементы(); 	
	Для Каждого Элемент Из ПодчиненныеСтроки Цикл
		Элемент.Пометка = Пометка;
		Если ПодчиненныеСтроки.Количество() > 0 Тогда
			ЗаполнитьПометкиПотомковРекурсивно(Элемент,Пометка);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкиРодителейРекурсивно(ДанныеСтроки,Пометка)
	Родитель= ДанныеСтроки.ПолучитьРодителя();
	Если Пометка И  Родитель <> Неопределено Тогда
		Родитель.Пометка = Пометка ;
		УстановитьПометкиРодителейРекурсивно(Родитель,Пометка)
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции


&НаКлиенте
Процедура Показатьxml(Данные)
	C= Новый СериализаторXDTO(ФабрикаXDTO);
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	C.ЗаписатьXML(ЗаписьXML, Данные, НазначениеТипаXML.Явное);	
	СхемаXML= ЗаписьXML.Закрыть();
	ТекстДок=Новый ТекстовыйДокумент;
	ТекстДок.УстановитьТекст(СхемаXML);
	ТекстДок.Показать();
КонецПроцедуры

Функция УдалитьНедопустимыеСимволыXML(СтрокаХМЛ)
	//"""http://1s-portal.ru/index.php/stati/obmendannymi/24-xml/55-udalit-nedopustimye-simvoly-ml.html"""  
	Позиция = Позиция = НайтиНедопустимыеСимволыXML(СтрокаХМЛ, Позиция);
	Пока Позиция <> 0 Цикл
		НедопустимыйСимвол = Сред(СтрокаХМЛ, Позиция,1);
		СтрокаХМЛ = СтрЗаменить(СтрокаХМЛ, НедопустимыйСимвол, "");
		Позиция = НайтиНедопустимыеСимволыXML(СтрокаХМЛ);
	КонецЦикла; 
	Возврат СтрокаХМЛ;
КонецФункции

#КонецОбласти







